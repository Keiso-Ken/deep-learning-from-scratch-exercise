# -*- coding: utf-8 -*-
"""chapter2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/178W-ksfizVLHX-YGpC_gTFVhYT-i22hB

# 2章 パーセプトロン

2.1 パーセプトロンとは

2.2 単純な論理回路

> 2.2.1 ANDゲート

> 2.2.2 NANDゲートとORゲート

2.3 パーセプトロンの実装

> 2.3.1 簡単な実装
"""

# AND関数の定義
def AND(x1,x2):
  w1, w2, theta = 0.5, 0.5, 0.7
  tmp = x1*w1 + x2*w2
  if tmp <= theta:
    return 0
  elif tmp > theta:
    return 1

# AND関数の動作確認
AND(1, 1)

# NAND関数の定義
def NAND(x1, x2):
  w1, w2, theta = -0.5, -0.5, -0.7
  tmp = x1*w1 + x2*w2
  if tmp <= theta:
    return 0
  elif tmp > theta:
    return 1

# NAND関数の動作確認
NAND(0, 0)

# OR関数の定義
def OR(x1, x2):
  w1, w2, theta = 0.5, 0.5, 0.2
  tmp = x1*w1 + x2*w2
  if tmp <= theta:
    return 0
  elif tmp > theta:
    return 1

# OR関数の動作確認
OR(1, 0)

"""> 2.3.2 重みとバイアスの導入"""

import numpy as np  # numpyインポート

x = np.array([0, 1])  # 入力

w = np.array([0.5, 0.5])  # 重み

b = -0.7  # バイアス

w*x # x1*w1とx2*w2

np.sum(w*x) # x1*w1 + x2*w2

np.sum(w*x) + b　# 式(2.2)の計算

"""> 2.3.3 重みとバイアスによる実装"""

# ANDゲート
def AND(x1, x2):
  x = np.array([x1, x2])
  w = np.array([0.5, 0.5])
  b = -0.7
  tmp = np.sum(w*x) + b
  if tmp <= 0:
    return 0
  else:
    return 1

# AND動作確認
AND(1, 1)

# NANDゲート
def NNAND(x1, x2):
  x = np.array([x1, x2])
  w = np.array([-0.5, -0.5])
  b = 0.7
  tmp = np.sum(w*x) + b
  if tmp <= 0:
    return 0
  else:
    return 1

# NAND動作確認
NAND(1, 1)

# ORゲート
def OR(x1, x2):
  x = np.array([x1, x2])
  w = np.array([0.5, 0.5])
  b = -0.2
  tmp = np.sum(w*x) + b
  if tmp <= 0:
    return 0
  else:
    return 1

# OR動作確認
OR(1, 1)

"""2.4 パーセプトロンの限界

> 2.4.1 XORゲート

> 2.4.2 線形と非線形

2.5 多層パーセプトロン

> 2.5.1 既存ゲートの組み合わせ

> 2.5.2 XORゲートの実装
"""

def XOR(x1, x2):
  s1 = NAND(x1, x2)
  s2 = OR(x1, x2)
  y = AND(s1, s2)
  return y

# XOR動作確認
XOR(0, 0)

"""2.6 NANDからコンピュータへ

2.7 まとめ

終わり
"""